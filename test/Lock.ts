import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
import { randomBytes } from "crypto";

describe("X509Decoder", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployContractsFixture() {
    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const P256SHA256ContractFactory = await ethers.getContractFactory("P256SHA256Algorithm");
    const P256SHA256 = await P256SHA256ContractFactory.deploy();
    
    const DateTimeFactory = await ethers.getContractFactory("DateTime");
    const DateTime = await DateTimeFactory.deploy();
    
    const X509DecoderFactory = await ethers.getContractFactory("X509Parser");
    const xd = await X509DecoderFactory.deploy(P256SHA256.address, DateTime.address);

    return { xd, P256SHA256 };
  }

  describe("Deployment", function () {
    it("Should deploy contracts", async function () {
      const { xd } = await loadFixture(deployContractsFixture);
      expect(xd).to.not.equal(null);
    });
    
    it("Should pass basic signature validation", async function() {
        const { P256SHA256 } = await loadFixture(deployContractsFixture);
        let res = await P256SHA256.verify(
            "0x00000000B7E08AFDFE94BAD3F1DC8C734798BA1C62B3A0AD1E9EA2A38201CD0889BC7A193603F747959DBF7A4BB226E41928729063ADC7AE43529E61B563BBC606CC5E09",
            "0x4578616d706c65206f66204543445341207769746820502d323536",
            "0x2B42F576D07F4165FF65D1F3B1500F81E44C316F1F0B3EF57325B69ACA46104FDC42C2122D6392CD3E3A993A89502A8198C1886FE69D262C4B329BDB6B63FAF1"
        );
        expect(res).to.be.true;
    });
    
    it("Should pass signature validation on a sample certificate payload", async function() {
        const { P256SHA256 } = await loadFixture(deployContractsFixture);
        console.log("Signature validation on sample payload:");
        let res = await P256SHA256.verify(
            "0x0000000060225dea1eb30c0b1ed9faa64c95f296262bf946b6a099cc630f6c4531cbe8cba1bbff136cec829bc5bf97101481fad8e9ced8e7fbc53e049886ae7fdc447a83",
            "0x30820279a003020102020101300a06082a8648ce3d0403023039310c300a060355040a130354454531293027060355040313203664373032613963626339613439656562633964343036663862393462623338301e170d3730303130313030303030305a170d3438303130313030303030305a301f311d301b06035504031314416e64726f6964204b657973746f7265204b65793059301306072a8648ce3d020106082a8648ce3d03010703420004b7984e4c240eaf334688533606c1624efe72fb186d276d7e3a556f95e8bbfa3e70e88210e100a50f6ab4fe1fc9abf3605884661bb7166b7f9fae2d99afa4e6f9a382018a30820186300e0603551d0f0101ff04040302078030820172060a2b06010401d679020111048201623082015e020200c80a0101020200c80a010104413963624277e3c87e9dd53f28bb4ccd53a1900e4d577d37fa7dc87d78a886720f647e1589b96fd9b62a4f6824703c08a153be7d64f9a5a2322dabf19e551da1181c04003056bf853d0802060184ca7463adbf85454604443042311c301a0415636f6d2e6578616d706c652e616e64726f6964636b020101312204207322227e0a2a9bac891e1e3fda1fc16356b8e4a417c20c419627d28f3e083bf13081b0a1053103020102a203020103a30402020100a50b3109020104020105020106aa03020101bf837803020103bf8379040202012cbf853e03020100bf85404c304a04208b2c4cd539f5075e8e7cf212adb3db0413fbd77d321199c73d5a473c51f2e10d0101ff0a0100042092a169f2ac890d35022e76791565c123c56620dae3ffa41c4195e15a3f34390bbf854105020301fbd0bf85420502030315e1bf854e06020401348be9bf854f06020401348be9",
            "0xcce8932d78853889f7b5d669e475dcb5098cd070d82cd208860944ab08a45ce49f3f5d31731ba87109b54b4953a6863dc35c5782fbd03871125676a93ce880d2"
        );
        expect(res).to.be.true;
    });
    
    it("Should parse a certificate", async function () {
      const { xd } = await loadFixture(deployContractsFixture);
      await xd.addCert(
            "0x308202d430820279a003020102020101300a06082a8648ce3d0403023039310c300a060355040a130354454531293027060355040313203664373032613963626339613439656562633964343036663862393462623338301e170d3730303130313030303030305a170d3438303130313030303030305a301f311d301b06035504031314416e64726f6964204b657973746f7265204b65793059301306072a8648ce3d020106082a8648ce3d03010703420004b7984e4c240eaf334688533606c1624efe72fb186d276d7e3a556f95e8bbfa3e70e88210e100a50f6ab4fe1fc9abf3605884661bb7166b7f9fae2d99afa4e6f9a382018a30820186300e0603551d0f0101ff04040302078030820172060a2b06010401d679020111048201623082015e020200c80a0101020200c80a010104413963624277e3c87e9dd53f28bb4ccd53a1900e4d577d37fa7dc87d78a886720f647e1589b96fd9b62a4f6824703c08a153be7d64f9a5a2322dabf19e551da1181c04003056bf853d0802060184ca7463adbf85454604443042311c301a0415636f6d2e6578616d706c652e616e64726f6964636b020101312204207322227e0a2a9bac891e1e3fda1fc16356b8e4a417c20c419627d28f3e083bf13081b0a1053103020102a203020103a30402020100a50b3109020104020105020106aa03020101bf837803020103bf8379040202012cbf853e03020100bf85404c304a04208b2c4cd539f5075e8e7cf212adb3db0413fbd77d321199c73d5a473c51f2e10d0101ff0a0100042092a169f2ac890d35022e76791565c123c56620dae3ffa41c4195e15a3f34390bbf854105020301fbd0bf85420502030315e1bf854e06020401348be9bf854f06020401348be9300a06082a8648ce3d0403020349003046022100cce8932d78853889f7b5d669e475dcb5098cd070d82cd208860944ab08a45ce40221009f3f5d31731ba87109b54b4953a6863dc35c5782fbd03871125676a93ce880d2",
      "0x0000000060225dea1eb30c0b1ed9faa64c95f296262bf946b6a099cc630f6c4531cbe8cba1bbff136cec829bc5bf97101481fad8e9ced8e7fbc53e049886ae7fdc447a83"
      );
    });
  });
});
